# yaml-language-server: $schema=https://aka.ms/configuration-dsc-schema/0.2
# Reference: https://github.com/microsoft/PowerToys/blob/main/doc/devdocs/readme.md#compiling-powertoys
properties:
  configurationVersion: 0.2.0
  resources:

# Windows settings
    - resource: Microsoft.Windows.Developer/WindowsExplorer
      directives:
        description: File Explorer settings 
        allowPrerelease: true
      settings:
        FileExtensions: Show
        HiddenFiles: Show
    - resource: Microsoft.Windows.Developer/Taskbar
      directives:
        description: Taskbar settings 
        allowPrerelease: true
      settings:
        SearchboxMode: Hide
        TaskViewButton: Hide
        WidgetsButton: Hide

    - resource: PSDscResources/Script
      id: Win.StoreUpdate
      directives:
        description: Updating Store Apps, we care mostly about Terminal and App installer
        allowPrerelease: true
      settings:
        GetScript: |
          # Your custom PowerShell code to check app configuration
        TestScript: |
          return $false
        SetScript: |
          Add-Type -AssemblyName System.Security
          Add-Type -AssemblyName System.Management.Automation
          
          function Update-Package {
              param (
                  [string]$packageFamilyName
              )
          
              try {
                  Write-Output ">> Updating $packageFamilyName"
                  $appInstallManager = [Windows.ApplicationModel.Store.Preview.InstallControl.AppInstallManager]::new()
                  $user = [Windows.System.User]::GetDefault()
                  $updateTask = $appInstallManager.UpdateAppByPackageFamilyNameForUserAsync($user, $packageFamilyName, "");
              } catch {
                  Write-Output "!! Error updating $packageFamilyName"
              }
          }
          
          
          function Get-AllPackages {
              $packageManager = [Windows.Management.Deployment.PackageManager,Windows.Web,ContentType=WindowsRuntime]::new()
              $user = [System.Security.Principal.WindowsIdentity]::GetCurrent().User
              $packages = $packageManager.FindPackagesForUser($user.Value)
          
              $result = @()
              foreach ($package in $packages) {
                  $result += $package.Id.FamilyName
              }
              return $result
          }
          
          $allPackages = Get-AllPackages
          $allPackages | ForEach-Object {
              Update-Package "$_"
          }

    - resource: PSDscResources/Script
      id: Win.UpdateWindows
      directives:
        description: Updating Windows
        allowPrerelease: true
      settings:
        GetScript: |
          # Your custom PowerShell code to check app configuration
        TestScript: |
          return $false
        SetScript: |
          # Forcing Windows Update
          Write-Host "Start: Windows Update"
          $UpdateCollection = New-Object -ComObject Microsoft.Update.UpdateColl
          $Searcher = New-Object -ComObject Microsoft.Update.Searcher
          $Session = New-Object -ComObject Microsoft.Update.Session
          $Installer = New-Object -ComObject Microsoft.Update.Installer

          $Searcher.ServerSelection = 2
 
          $Result = $Searcher.Search("IsInstalled=0 and IsHidden=0")

          $Downloader = $Session.CreateUpdateDownloader()
          $Downloader.Updates = $Result.Updates
          $Downloader.Download()
 
          $Installer.Updates = $Result.Updates
          $Installer.Install()
          Write-Host "Done: Windows Update"
